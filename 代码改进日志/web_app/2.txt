# web_app.py
import os
import uuid
import logging
from flask import Flask, render_template, request, jsonify, send_file
from flask_wtf.csrf import CSRFProtect  # 新增CSRF保护
import subprocess
from werkzeug.utils import secure_filename

# 初始化应用
app = Flask(__name__)
app.config.update(
    SCRIPT_PATH=os.getenv('SCRIPT_PATH', 'C:/Users/19519362920/Desktop/comfyui-web/websockets_api_example.py'),
    OUTPUT_DIR=os.getenv('OUTPUT_DIR', 'D:/comfyui-portable-nfc1.2-windows/ComfyUI/temp'),
    MAX_CONTENT_LENGTH=16 * 1024 * 1024,  # 限制请求大小16MB
    CSRF_ENABLED=True,
    SECRET_KEY=os.getenv('FLASK_SECRET', uuid.uuid4().hex)
)

csrf = CSRFProtect(app)  # 启用CSRF保护

# 配置日志
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('web_app.log'),
        logging.StreamHandler()
    ]
)

def validate_prompt(text: str) -> bool:
    """验证提示词有效性"""
    # 允许中英文、数字和常用标点
    if len(text) > 1000:
        return False
    return all(ord(c) < 128 and c.isprintable() for c in text)

@app.route('/generate_image', methods=['POST'])
@csrf.exempt  # 根据API需求决定是否豁免CSRF
def generate_image():
    """处理图像生成请求（异步版）"""
    from concurrent.futures import ThreadPoolExecutor
    executor = ThreadPoolExecutor(1)
    
    try:
        # 验证JSON格式
        if not request.is_json:
            return jsonify({"status": "error", "message": "请求必须为JSON格式"}), 400
            
        data = request.get_json()
        prompt_text = data.get("prompt_text", "").strip()[:1000]  # 限制长度
        
        # 增强输入验证
        if not validate_prompt(prompt_text):
            logging.warning(f"非法提示词内容: {prompt_text}")
            return jsonify({"status": "error", "message": "非法提示词内容"}), 400

        # 验证脚本路径
        if not os.path.isfile(app.config['SCRIPT_PATH']):
            logging.error(f"脚本文件不存在: {app.config['SCRIPT_PATH']}")
            return jsonify({"status": "error", "message": "系统配置错误"}), 500

        # 异步执行生成任务
        def async_task():
            try:
                proc = subprocess.run(
                    ['python', app.config['SCRIPT_PATH']],  # 参数列表正确关闭
                    input=prompt_text,
                    check=True,
                    capture_output=True,
                    text=True,
                    encoding='utf-8',
                    timeout=300  # 5分钟超时
                )
                logging.info(f"生成成功: {proc.stdout}")
            except subprocess.TimeoutExpired:
                logging.error("生成任务超时")
            except Exception as e:
                logging.error(f"生成失败: {str(e)}")

        executor.submit(async_task)
        
        return jsonify({
            "status": "success",
            "message": "图像生成任务已提交",
            "task_id": str(uuid.uuid4())
        })

    except Exception as e:
        logging.exception("严重错误发生")
        return jsonify({"status": "error", "message": "服务器内部错误"}), 500

@app.route('/get_latest_image', methods=['GET'])
def get_latest_image():
    """安全获取最新生成的图像"""
    try:
        # 验证文件路径
        if not os.path.isfile("latest_image.txt"):
            return jsonify({"status": "error", "message": "尚未生成图像"}), 404
            
        with open("latest_image.txt", "r") as f:
            image_path = f.read().strip()
        
        # 路径安全检查
        if not os.path.normpath(image_path).startswith(os.path.normpath(app.config['OUTPUT_DIR'])):
            logging.warning(f"非法路径访问尝试: {image_path}")
            return jsonify({"status": "error", "message": "非法文件路径"}), 403
            
        if not os.path.isfile(image_path):
            logging.error(f"图像文件不存在: {image_path}")
            return jsonify({"status": "error", "message": "图像文件丢失"}), 404
            
        # 验证文件类型
        if not image_path.lower().endswith(('.png', '.jpg', '.jpeg')):
            logging.warning(f"非图像文件访问尝试: {image_path}")
            return jsonify({"status": "error", "message": "文件类型错误"}), 400
            
        return send_file(image_path, mimetype='image/png')
        
    except Exception as e:
        logging.error(f"获取图像失败: {str(e)}")
        return jsonify({"status": "error", "message": "无法获取图像"}), 500

@app.route('/')
def index():
    """渲染主页"""
    return render_template('index.html')

if __name__ == "__main__":
    from waitress import serve  # 生产环境推荐使用Waitress
    serve(app, host="0.0.0.0", port=5000)
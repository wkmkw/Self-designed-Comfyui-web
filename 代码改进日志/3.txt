//websockets_api_example.py：
# websockets_api_example.py

# 该示例使用websockets API监听提示词执行完成事件，完成后通过/history端点下载图像

import websocket
import uuid
import json
import urllib.request
import urllib.parse
import os
import sys
from datetime import datetime  # 新增datetime导入

# 服务器地址配置
server_address = "127.0.0.1:8188"
client_id = str(uuid.uuid4())

def queue_prompt(prompt):
    """将提示词任务加入执行队列"""
    request_data = {"prompt": prompt, "client_id": client_id}
    data = json.dumps(request_data).encode('utf-8')
    print("发送提示数据:", request_data)

    headers = {'Content-Type': 'application/json'}
    req = urllib.request.Request(
        f"http://{server_address}/prompt",
        data=data,
        headers=headers
    )
    
    try:
        response = urllib.request.urlopen(req)
        return json.loads(response.read())
    except urllib.error.HTTPError as e:
        print(f"HTTP错误: {e.code} - {e.reason}")
        print(e.read().decode())
        raise

def get_image(filename, subfolder, folder_type):
    """根据文件名获取生成的图像数据"""
    data = {"filename": filename, "subfolder": subfolder, "type": folder_type}
    url_values = urllib.parse.urlencode(data)
    with urllib.request.urlopen(f"http://{server_address}/view?{url_values}") as response:
        return response.read()

def get_history(prompt_id):
    """获取指定提示ID的执行历史记录"""
    with urllib.request.urlopen(f"http://{server_address}/history/{prompt_id}") as response:
        return json.loads(response.read())

def get_images(ws, prompt, output_dir):
    """生成图像并返回实际保存的文件路径列表"""
    try:
        prompt_id = queue_prompt(prompt)['prompt_id']
        
        while True:
            out = ws.recv()
            if isinstance(out, str):
                message = json.loads(out)
                if message['type'] == 'executing':
                    data = message['data']
                    if data['node'] is None and data['prompt_id'] == prompt_id:
                        break

        history = get_history(prompt_id)
        history = history[prompt_id]['outputs']
        
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        filename = f"GUO_{timestamp}_{hash(prompt['6']['inputs']['text'][:10])}.PNG"
        filepath = os.path.join(output_dir, filename)
        
        for node_id in history:
            node_output = history[node_id]
            if 'images' in node_output:
                image = node_output['images'][0]
                image_data = get_image(image['filename'], image['subfolder'], image['type'])
                with open(filepath, "wb") as f:
                    f.write(image_data)
                return [filepath]
        
        return []

    except Exception as e:
        print(f"图像生成失败: {str(e)}")
        return []

def generate_image_with_comfyui(prompt_text, task_id):
    """使用新版工作流配置生成图像"""
    prompt = {
        "6": {
            "inputs": {
                "text": prompt_text,
                "speak_and_recognation": True,
                "clip": ["11", 0]
            },
            "class_type": "CLIPTextEncode",
            "_meta": {"title": "CLIP文本编码器"}
        },
        "10": {
            "inputs": {"vae_name": "ae.sft"},
            "class_type": "VAELoader",
            "_meta": {"title": "VAE加载器"}
        },
        "11": {
            "inputs": {
                "clip_name1": "t5\\t5xxl_fp8_e4m3fn.safetensors",
                "clip_name2": "clip_l.safetensors",
                "type": "flux"
            },
            "class_type": "DualCLIPLoader",
            "_meta": {"title": "双CLIP加载器"}
        },
        "12": {
            "inputs": {
                "unet_name": "F.1基础算法模型-哩布在线可运行_F.1-dev-fp8.safetensors",
                "weight_dtype": "fp8_e4m3fn"
            },
            "class_type": "UNETLoader",
            "_meta": {"title": "UNET加载器"}
        },
        "13": {
            "inputs": {
                "noise": ["25", 0],
                "guider": ["22", 0],
                "sampler": ["16", 0],
                "sigmas": ["17", 0],
                "latent_image": ["70", 0]
            },
            "class_type": "SamplerCustomAdvanced",
            "_meta": {"title": "自定义采样器(高级)"}
        },
        "16": {
            "inputs": {"sampler_name": "euler"},
            "class_type": "KSamplerSelect",
            "_meta": {"title": "K采样器选择"}
        },
        "17": {
            "inputs": {
                "scheduler": "simple",
                "steps": 45,
                "denoise": 1,
                "model": ["73", 0]
            },
            "class_type": "BasicScheduler",
            "_meta": {"title": "基础调度器"}
        },
        "22": {
            "inputs": {
                "model": ["73", 0],
                "conditioning": ["6", 0]
            },
            "class_type": "BasicGuider",
            "_meta": {"title": "基础引导"}
        },
        "25": {
            "inputs": {"noise_seed": 1007042570686024},
            "class_type": "RandomNoise",
            "_meta": {"title": "随机噪波"}
        },
        "64": {
            "inputs": {
                "samples": ["13", 0],
                "vae": ["10", 0]
            },
            "class_type": "VAEDecode",
            "_meta": {"title": "VAE解码"}
        },
        "65": {
            "inputs": {"images": ["64", 0]},
            "class_type": "PreviewImage",
            "_meta": {"title": "预览图像"}
        },
        "70": {
            "inputs": {
                "width": 512,
                "height": 512,
                "batch_size": 1
            },
            "class_type": "EmptyLatentImage",
            "_meta": {"title": "空Latent"}
        },
        "73": {
            "inputs": {
                "lora_name": "F.1-矢量卡通风格LOGO_V1.safetensors",
                "strength_model": 2.5,
                "model": ["12", 0]
            },
            "class_type": "LoraLoaderModelOnly",
            "_meta": {"title": "LoRA加载器(仅模型)"}
        }
    }

    # 动态参数配置
    prompt["25"]["inputs"]["noise_seed"] = int(datetime.now().timestamp() * 1000) % 2**32
    prompt["17"]["inputs"]["steps"] = 50
    prompt["73"]["inputs"]["strength_model"] = 2.0

    output_directory = r"D:\comfyui-portable-nfc1.2-windows\ComfyUI\temp"
    ws = None
    
    try:
        ws = websocket.WebSocket()
        ws.connect(f"ws://{server_address}/ws?clientId={client_id}")
        
        generated_files = get_images(ws, prompt, output_directory)
        
        if not generated_files:
            print("未生成任何图像文件")
            return None

        latest_file = generated_files[0]
        
        if not os.path.exists(latest_file):
            print(f"文件不存在: {latest_file}")
            return None

        try:
            with open("latest_image.txt", "w") as f:
                f.write(latest_file)
            print(f"图像保存路径: {latest_file}")
            return latest_file
        except IOError as e:
            print(f"文件写入失败: {str(e)}")
            return None

    except websocket.WebSocketException as e:
        print(f"WebSocket连接错误: {str(e)}")
        return None
    finally:
        if ws and ws.connected:
            ws.close()

if __name__ == "__main__":
    if len(sys.argv) > 1:
        prompt_text = sys.argv[1]
        generate_image_with_comfyui(prompt_text, "default_task")
    else:
        print("请提供提示词参数")

//web_app.py：
# web_app.py
import os
import uuid
import logging
from flask import Flask, render_template, request, jsonify, send_file
from flask_wtf.csrf import CSRFProtect  # 新增CSRF保护
import subprocess
from werkzeug.utils import secure_filename

# 初始化应用
app = Flask(__name__)
app.config.update(
    SCRIPT_PATH=os.getenv('SCRIPT_PATH', 'C:/Users/19519362920/Desktop/comfyui-web/websockets_api_example.py'),
    OUTPUT_DIR=os.getenv('OUTPUT_DIR', 'D:/comfyui-portable-nfc1.2-windows/ComfyUI/temp'),
    MAX_CONTENT_LENGTH=16 * 1024 * 1024,  # 限制请求大小16MB
    CSRF_ENABLED=True,
    SECRET_KEY=os.getenv('FLASK_SECRET', uuid.uuid4().hex)
)

csrf = CSRFProtect(app)  # 启用CSRF保护

# 配置日志
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('web_app.log'),
        logging.StreamHandler()
    ]
)

def validate_prompt(text: str) -> bool:
    """验证提示词有效性"""
    # 允许中英文、数字和常用标点
    if len(text) > 1000:
        return False
    return all(ord(c) < 128 and c.isprintable() for c in text)

@app.route('/generate_image', methods=['POST'])
@csrf.exempt  # 根据API需求决定是否豁免CSRF
def generate_image():
    """处理图像生成请求（异步版）"""
    from concurrent.futures import ThreadPoolExecutor
    executor = ThreadPoolExecutor(1)
    
    try:
        # 验证JSON格式
        if not request.is_json:
            return jsonify({"status": "error", "message": "请求必须为JSON格式"}), 400
            
        data = request.get_json()
        prompt_text = data.get("prompt_text", "").strip()[:1000]  # 限制长度
        
        # 增强输入验证
        if not validate_prompt(prompt_text):
            logging.warning(f"非法提示词内容: {prompt_text}")
            return jsonify({"status": "error", "message": "非法提示词内容"}), 400

        # 验证脚本路径
        if not os.path.isfile(app.config['SCRIPT_PATH']):
            logging.error(f"脚本文件不存在: {app.config['SCRIPT_PATH']}")
            return jsonify({"status": "error", "message": "系统配置错误"}), 500

        # 异步执行生成任务
        def async_task():
            try:
                proc = subprocess.run(
                    ['python', app.config['SCRIPT_PATH']],  # 参数列表正确关闭
                    input=prompt_text,
                    check=True,
                    capture_output=True,
                    text=True,
                    encoding='utf-8',
                    timeout=300  # 5分钟超时
                )
                logging.info(f"生成成功: {proc.stdout}")
            except subprocess.TimeoutExpired:
                logging.error("生成任务超时")
            except Exception as e:
                logging.error(f"生成失败: {str(e)}")

        executor.submit(async_task)
        
        return jsonify({
            "status": "success",
            "message": "图像生成任务已提交",
            "task_id": str(uuid.uuid4())
        })

    except Exception as e:
        logging.exception("严重错误发生")
        return jsonify({"status": "error", "message": "服务器内部错误"}), 500

@app.route('/get_latest_image', methods=['GET'])
def get_latest_image():
    """安全获取最新生成的图像"""
    try:
        # 验证文件路径
        if not os.path.isfile("latest_image.txt"):
            return jsonify({"status": "error", "message": "尚未生成图像"}), 404
            
        with open("latest_image.txt", "r") as f:
            image_path = f.read().strip()
        
        # 路径安全检查
        if not os.path.normpath(image_path).startswith(os.path.normpath(app.config['OUTPUT_DIR'])):
            logging.warning(f"非法路径访问尝试: {image_path}")
            return jsonify({"status": "error", "message": "非法文件路径"}), 403
            
        if not os.path.isfile(image_path):
            logging.error(f"图像文件不存在: {image_path}")
            return jsonify({"status": "error", "message": "图像文件丢失"}), 404
            
        # 验证文件类型
        if not image_path.lower().endswith(('.png', '.jpg', '.jpeg')):
            logging.warning(f"非图像文件访问尝试: {image_path}")
            return jsonify({"status": "error", "message": "文件类型错误"}), 400
            
        return send_file(image_path, mimetype='image/png')
        
    except Exception as e:
        logging.error(f"获取图像失败: {str(e)}")
        return jsonify({"status": "error", "message": "无法获取图像"}), 500

@app.route('/')
def index():
    """渲染主页"""
    return render_template('index.html')

if __name__ == "__main__":
    from waitress import serve  # 生产环境推荐使用Waitress
    serve(app, host="0.0.0.0", port=5000)

//index.heml：
<!DOCTYPE html>
<html lang="zh">
<head>
    <!-- 增强的元信息配置 -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0">
    <meta http-equiv="Cache-Control" content="no-store, max-age=0">
    <meta name="theme-color" content="#3498db">
    <title>AI图像生成器 - 稳定创作平台</title>
    
    <!-- 优化后的内联样式 -->
    <style>
        /* 增强的基础样式 */
        :root {
            --primary-color: #3498db;
            --hover-color: #2980b9;
            --shadow-light: rgba(0,0,0,0.1);
            --shadow-medium: rgba(0,0,0,0.15);
        }

        body {
            font-family: system-ui, -apple-system, 'Segoe UI', Roboto, sans-serif;
            max-width: min(90%, 800px);
            margin: 2rem auto;
            padding: 0 1rem;
            line-height: 1.6;
        }

        /* 增强的加载动画 */
        .loader {
            width: 2.5rem;
            height: 2.5rem;
            border: 4px solid #f3f3f3;
            border-top-color: var(--primary-color);
            animation: spin 1.1s cubic-bezier(0.5, 0.1, 0.5, 0.9) infinite;
            margin: 2rem auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* 响应式输入区域 */
        #prompt-text {
            width: 100%;
            padding: 0.8rem;
            border: 2px solid var(--primary-color);
            border-radius: 0.5rem;
            margin: 1rem 0;
            font-size: 1rem;
            transition: border-color 0.2s;
        }

        #prompt-text:focus {
            outline: none;
            border-color: var(--hover-color);
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
        }

        /* 增强按钮交互 */
        button {
            background: var(--primary-color);
            color: white;
            padding: 0.8rem 1.5rem;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 1rem;
            width: 100%;
            position: relative;
            overflow: hidden;
        }

        button::after {
            content: "";
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.2) 10%, transparent 11%);
            transform: translate(25%, 25%);
        }

        button:hover:not(:disabled) {
            background: var(--hover-color);
            transform: translateY(-2px);
            box-shadow: 0 0.3rem 1rem var(--shadow-light);
        }

        button:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

        /* 图片容器优化 */
        #image-container {
            margin: 2rem 0;
            min-height: 300px;
            position: relative;
        }

        #generated-image {
            max-width: 100%;
            height: auto;
            border-radius: 0.8rem;
            box-shadow: 0 0.25rem 1rem var(--shadow-medium);
            display: none;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .fade-in {
            opacity: 1 !important;
        }

        /* 移动端优化 */
        @media (max-width: 480px) {
            body {
                margin: 1rem auto;
            }
            
            #prompt-text {
                font-size: 0.9rem;
                padding: 0.7rem;
            }
            
            button {
                padding: 0.7rem;
                font-size: 0.95rem;
            }
        }
    </style>
</head>
<body>
    <h1 aria-label="AI图像生成器">🎨 AI图像生成器</h1>
    
    <div role="group" aria-labelledby="prompt-label">
        <label id="prompt-label" for="prompt-text">创作提示：</label>
        <input 
            type="text" 
            id="prompt-text" 
            placeholder="例如：'星空下的雪山，赛博朋克风格'"
            aria-required="true"
            maxlength="200"
        >
    </div>

    <button 
        id="generate-btn" 
        onclick="handleGenerate()"
        aria-live="polite"
    >
        立即生成
    </button>

    <div id="image-container" aria-live="polite">
        <div class="loader" 
            style="display: none;" 
            role="alert"
            aria-label="图像生成中，请稍候"
        ></div>
        <img 
            id="generated-image" 
            src="" 
            alt="生成结果展示"
            aria-describedby="image-description"
            loading="lazy"
        >
    </div>

    <script>
        // 增强的状态管理
        const state = {
            currentController: null,
            retryCount: 0,
            maxRetries: 5
        };

        // 优化后的生成处理器
        async function handleGenerate() {
            const promptInput = document.getElementById('prompt-text');
            const generateBtn = document.getElementById('generate-btn');
            const promptText = promptInput.value.trim();
            
            if (!validatePrompt(promptText)) {
                showAlert('请输入有效的创作描述（1-200个字符）');
                promptInput.focus();
                return;
            }

            disableUI(true);
            showLoader(true);
            
            try {
                state.currentController = new AbortController();
                setTimeout(() => state.currentController?.abort(), 60000);

                const response = await fetch('/generate_image', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Protection': '1'
                    },
                    body: JSON.stringify({ prompt_text: promptText }),
                    signal: state.currentController.signal
                });

                await handleResponse(response);
            } catch (error) {
                handleError(error);
            } finally {
                state.currentController = null;
            }
        }

        // 新增验证函数
        function validatePrompt(text) {
            return text.length > 0 && text.length <= 200 && /^[\w\W\p{Script=Han}]+$/u.test(text);
        }

        // 增强的响应处理器
        async function handleResponse(response) {
            if (!response.ok) {
                const error = await response.json().catch(() => ({
                    message: `请求失败：${response.status} ${response.statusText}`
                }));
                throw new Error(error.message);
            }

            const data = await response.json();
            if (data.status === 'success') {
                startPolling();
            } else {
                throw new Error(data.message || '未知错误');
            }
        }

        // 优化的轮询机制
        function startPolling() {
            state.retryCount = 0;
            pollImage();
        }

        // 指数退避轮询策略
        async function pollImage() {
            try {
                const response = await fetch('/get_latest_image', {
                    cache: 'reload',
                    signal: state.currentController?.signal
                });

                if (response.status === 404) {
                    if (state.retryCount < state.maxRetries) {
                        state.retryCount++;
                        const delay = Math.min(3000 * Math.pow(2, state.retryCount), 30000);
                        setTimeout(pollImage, delay);
                        return;
                    }
                    throw new Error('图片生成超时');
                }

                if (!response.ok) throw new Error('图片获取失败');

                const blob = await response.blob();
                if (!blob.type.startsWith('image/')) {
                    throw new Error('无效的图片格式');
                }

                displayImage(blob);
            } catch (error) {
                handleError(error);
            }
        }

        // 图片显示处理
        function displayImage(blob) {
            const imgElement = document.getElementById('generated-image');
            const objectURL = URL.createObjectURL(blob);

            imgElement.onload = () => {
                URL.revokeObjectURL(objectURL);
                imgElement.classList.add('fade-in');
                showLoader(false);
                disableUI(false);
            };

            imgElement.onerror = () => {
                URL.revokeObjectURL(objectURL);
                throw new Error('图片加载失败');
            };

            imgElement.style.display = 'block';
            imgElement.src = objectURL;
        }

        // 增强的错误处理
        function handleError(error) {
            console.error('Error:', error);
            showAlert(error.message || '发生未知错误');
            resetUI();
        }

        // UI控制函数
        function disableUI(disabled) {
            const btn = document.getElementById('generate-btn');
            btn.disabled = disabled;
            btn.textContent = disabled ? '生成中...' : '立即生成';
        }

        function showLoader(show) {
            document.querySelector('.loader').style.display = show ? 'block' : 'none';
        }

        function showAlert(message) {
            // 可替换为更优雅的提示方式
            alert(message);
        }

        function resetUI() {
            disableUI(false);
            showLoader(false);
            state.currentController?.abort();
        }

        // 事件监听优化
        window.addEventListener('DOMContentLoaded', () => {
            document.getElementById('prompt-text').addEventListener('input', function() {
                this.value = this.value.slice(0, 200);
            });

            document.getElementById('prompt-text').addEventListener('keydown', e => {
                if (e.key === 'Enter' && !e.repeat) {
                    handleGenerate();
                }
            });
        });

        // 页面可见性处理
        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'hidden') {
                state.currentController?.abort();
            }
        });
    </script>
</body>
</html>
